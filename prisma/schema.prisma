// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id           String   @id @default(uuid())
  name         String
  imageUrl     String?
  isPublic     Boolean  @default(true)
  likeCount    Int      @default(0)
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  introduction String?

  badges GroupBadge[] 
  posts  Post[]
}

model GroupBadge {
  id        String   @id @default(uuid())
  groupId   String
  badgeId   Int
  grantedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id])
}

model Badge {
  id   Int    @id @default(autoincrement())
  name String

  groups GroupBadge[]
}

model Post {
  id        String   @id @default(uuid())
  groupId   String
  nickname  String
  title     String
  imageUrl  String?
  content   String
  tags      String[] // 태그를 배열 형태로 저장. Prisma에서 제공.
  location  String
  moment    String?
  isPublic  Boolean  @default(true)
  password  String
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  nickname  String
  content   String
  password  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
