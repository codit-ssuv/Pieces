// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  password    String?
  badgesCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  badges GroupBadge[]
  memory Memory[]
}

model GroupBadge {
  id        String   @id @default(uuid())
  groupId   String
  badgeId   Int
  grantedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])
}

model Badge {
  id   Int    @id @default(autoincrement())
  name String

  groups GroupBadge[]
}

model Memory {
  id           String   @id @default(uuid())
  nickname     String
  title        String
  content      String
  tags         String[] // 태그를 배열 형태로 저장. Prisma에서 제공.
  location     String
  memoryMoment DateTime
  isPublic     Boolean  @default(true)
  password     String
  likes        Int      @default(0)
  commentCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  groupId      String

  group    Group     @relation(fields: [groupId], references: [id])
  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  nickname  String
  content   String
  password  String
  memoryId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memory Memory @relation(fields: [memoryId], references: [id])
}
